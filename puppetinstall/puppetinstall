#!/bin/bash
# --------------------------------------------------------------
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.
# --------------------------------------------------------------

# Execute error_handler function on script error
trap 'error_handler ${LINENO} $?' ERR

# Execute bashtrap function when user press [Ctrl]+[c]
trap bashtrap INT

# General commands
MV=`which mv`
CP=`which cp`
CAT=`which cat`
CUT=`which cut`
AWK=`which awk`
SED=`which sed`
WGET=`which wget`
DATE=`which date`
ECHO=`which echo`
UNAME=`which uname`
HOSTNAME=`which hostname`
LOCALEGEN=`which locale-gen`
RM=`which rm`
LSB_RELEASE=`which lsb_release`

# Parameters
MASTER=0
VERBOSE=0
MASTERIP=""
TIMESYNC=true
NODENAME=""
DOMAIN=""
OSDIST=""
TIMEZONE=${TIMEZONE:-"Asia/Colombo"}
PUPPET_INSTALLED=false

function error_handler(){
        MYSELF="$0"               # equals to script name
        LASTLINE="$1"            # argument 1: last line of error occurence
        LASTERR="$2"             # argument 2: error code of last command
        echo "ERROR in ${MYSELF}: line ${LASTLINE}: exit status of last command: ${LASTERR}"
	exit 1       
}

function print_usage(){	
	${ECHO} -e "This script will install PuppetLab puppet v3."   
	${ECHO} -e ""
	${ECHO} -e "Usage: "
	${ECHO} -e "	puppetinstall [-m|--master or -n|--node <node hostname>] -d <domain> -s <puppet master server ip> "
	${ECHO} -e ""
	${ECHO} -e "Commands:"
	${ECHO} -e "Either long or short options are allowed."
	${ECHO} -e "	-m, --master      	Install puppet master on the system."
	${ECHO} -e "	-n, --node <hostname> Install puppet agent on the system."
	${ECHO} -e "                      	If you use -m tag with this, -n tag will be ignored."
	${ECHO} -e "	-d, --domain <domain> Domain name of the environment. This will act as a"
	${ECHO} -e "                      	prefix to all the servers of the domain."
	${ECHO} -e "                      	eg: "
	${ECHO} -e "                      	if a serrver is: server23.dc1.example.com"
	${ECHO} -e "                      	your domain must be : dc1.example.com"
	${ECHO} -e "	-s, --serverip <ip>   IP address of the puppet master server."
	${ECHO} -e "                      	This IP address will added to the /etc/hosts file."
        ${ECHO} -e "    -t, --timezone <timezone>   This will set the system timezone. Default is Etc/UTC"
        ${ECHO} -e "                    eg: "
	${ECHO} -e "	-h, --help        	This will print this message."
	${ECHO} -e "	-v, --verbose     	This will activate verbose mode."
	${ECHO} -e ""
	${ECHO} -e "Examples: "
	${ECHO} -e "	sudo puppetinstall -m -d example.com"
	${ECHO} -e "    	This will install puppet master on example.com domain."
	${ECHO} -e ""
	${ECHO} -e "	sudo puppetinstall -n node001 -d example.com -s 192.168.122.1"
	${ECHO} -e "    	This will install puppet agent on example.com domain. "
	${ECHO} -e "    	Agent hostname will be node001.example.com and will point"
	${ECHO} -e "    	to the puppet master on 192.168.122.1 server."
	${ECHO} -e ""
}

function print_message(){
	if [ ${VERBOSE} -eq 1 ]; then
    		${ECHO} -e "[INFO] " $1
	fi    
}

function print_ok(){
	if [ ${VERBOSE} -eq 1 ]; then
    		${ECHO} -e "[Done]"  	 
	fi
}

function print_error(){
	if [ ${VERBOSE} -eq 1 ]; then
    		${ECHO} -e " [Error]\n"$1
	else
    		${ECHO} -e "[Error] " $1
	fi
	exit 1
}

function get_distro(){
# Check for distribution
	print_message "Checking for the distribution ... "
	if [ -f /etc/debian_version ]; then
	    	OSDIST="Debian"
	    	print_ok
	elif [ -f /etc/redhat-release ]; then
	    	OSDIST="RedHat"
	    	print_ok
	else
	    	OSDIST="Unknown"
	    	print_ok
	fi
}

function check_for_puppet(){
# Checking for puppet
	print_message "Checking for previous puppet installations ... "    
	if which puppet > /dev/null 2>&1; then
    		PUPPET_INSTALLED=true
		${ECHO} -e "\nPuppet already exists on this system...skipping installation"	
	else
    		print_ok
	fi
}

function get_confirmation(){
# Get user confirmation
	${ECHO} -en "Installing puppet     	: "
                    	[ ${MASTER} -eq 1 ] && ${ECHO} -e "Master" || ${ECHO} -e "Agent "  
	${ECHO} -e "Puppet Master FQDN name   : "${MASTERHOSTNAME}
	${ECHO} -e "Puppet Masters IP address : "${MASTERIP}
	${ECHO} -e "Domain of the deployment  : "${DOMAIN}
	${ECHO} -e "FQDN of this node     	: "${NODEHOSTNAME}
	${ECHO} -e "Operating system      	: "${OSDIST}
	${ECHO} -e "========================================================================"
}

bashtrap(){
	print_error "\n[Ctrl] + [c] detected ... \nScript will exit now."
}

function update_host(){
# Update '/etc/hosts'
	print_message "Updating '/etc/hosts' ... "
	${MV} /etc/hosts /etc/hosts-`${DATE} +%Y%m%d-%H%M%S`  && : || print_error "Failed to update '/etc/hosts' file. "
	${ECHO} "127.0.0.1  localhost" >/etc/hosts && : || print_error "Failed to update '/etc/hosts' file. "
	if [ ! ${MASTER} -eq 1 ]; then
    		${ECHO} "127.0.0.1  ${NODEHOSTNAME}" >>/etc/hosts && : || print_error "Failed to update '/etc/hosts' file. "
	fi
	${ECHO} "${MASTERIP}  ${MASTERHOSTNAME}" >>/etc/hosts && print_ok || print_error "Failed to update '/etc/hosts' file. "

# Update hostname
	print_message "Updating hostname ... "
	${HOSTNAME} ${NODEHOSTNAME} && : || print_error "Failed to update hostname. "
	${ECHO} ${NODEHOSTNAME} >/etc/hostname && print_ok || print_error "Failed to update '/etc/hostname' file. "
}

function install_on_ubuntu(){
# Install puppet master or agent on a Ubuntu/Debian system
#Ubuntu/Debian specific commands.
	APT=`which apt-get`
	NTPDEBIAN=`which ntpdate-debian`
	DPKG=`which dpkg`
	DPKGRECONF=`which dpkg-reconfigure`

# Do a time sync 
	if [ "${TIMESYNC}" = true ] ; then
		print_message "Updating system time ... "
		${ECHO} "${TIMEZONE}" > /etc/timezone && : || print_error "Failed to add timezone"
		${LOCALEGEN} en_US.UTF-8  && : || print_error "Failed to reconfigure timezone"
		${DPKGRECONF} locales  && : || print_error "Failed to reconfigure timezone"
		${DPKGRECONF} --frontend noninteractive tzdata  && : || print_error "Failed to reconfigure timezone"
		${NTPDEBIAN} && print_ok || print_error "Failed to synchronize time. "
	fi

# Install Puppet only if it is not already installed
	if [ "${PUPPET_INSTALLED}" = false ] ; then
# Install puppet repository
		CODENAME=`${LSB_RELEASE} --codename | cut -f2`
		print_message "Downloading repo file from puppetlabs for "
		if [ ${VERBOSE} -eq 1 ]; then
	    		${WGET} http://apt.puppetlabs.com/puppetlabs-release-${CODENAME}.deb && print_ok || print_error "Failed to download the repository file from puppetlabs."
		else
	    		${WGET} -q http://apt.puppetlabs.com/puppetlabs-release-${CODENAME}.deb && print_ok || print_error "Failed to download the repository file from puppetlabs."
		fi
		print_message "Installing puppet repository ... "
		${DPKG} -i puppetlabs-release-${CODENAME}.deb && print_ok || print_error "Failed to install the repository file of puppetlabs."

# Update repository list
		print_message "Updating system repository list ... "
		if [ ${VERBOSE} -eq 1 ]; then
	    		${APT} update && print_ok || print_error "Failed to update repository lists."
		else
	    		${APT} update -q=2 && : || print_error "Failed to update repository lists."
		fi

	
		if [ ${MASTER} -eq 1 ]; then
# Install puppet master
			${ECHO} "Installing puppet master ... "
    			${APT} install puppetmaster -y && print_ok || print_error "Failed to install puppet master."		
		else
# Install puppet agent
		    	${ECHO} "Installing puppet agent ... "
		    	${APT} install puppet -q=2 -y && print_ok || print_error "Failed to install puppet agent."
			${ECHO} -e "Copying Stratos facter file to /usr/lib/ruby/1.8"
		    	if [ -d /usr/lib/ruby/1.8 ]; then
			    	cp /root/bin/stratos_sendinfo.rb /usr/lib/ruby/1.8
		    	fi
		fi
	else
		# Remove old certificates if already installed
		/etc/init.d/puppet stop
		${RM} -rf /var/lib/puppet/ssl/*		
	fi

	if [ ${MASTER} -eq 1 ]; then
# Configure puppet master
	    	${ECHO} "Configuring puppet master ... "	    	
	    	${ECHO} -e "*.${DOMAIN}" > /etc/puppet/autosign.conf && : || print_error "Failed to configure puppet master's '/etc/puppet/autosign.conf'."
		${SED} -i "/server=*/d" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet master's '/etc/puppet/puppet.conf'."
	    	${SED} -i "2i server=${MASTERHOSTNAME}" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet master's '/etc/puppet/puppet.conf'."
	    	print_message "Restarting puppet master service ... "
	    	/etc/init.d/puppetmaster restart && ${ECHO} -e "Installation completed successfully." || print_error "Failed to restart puppet master."		
	else
# Configure puppet agent
	    	${ECHO} "Configuring puppet agent ... "		
		${SED} -i "/server=*/d" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet agent's '/etc/puppet/puppet.conf'."
		${SED} -i "2i server=${MASTERHOSTNAME}" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet agent's '/etc/puppet/puppet.conf'."
		print_message "Restarting puppet agent service ... "
		/etc/init.d/puppet restart && ${ECHO} -e "Installation completed successfully." || print_error "Failed to restart puppet agent."		
	fi
}

function install_on_redhat(){
# Install puppet master and agent on redhat base systems
	YUM=`which yum`
	RPM=`which rpm`
	EL_VERSION=$( ${UNAME} -r | ${AWK} -F "el" '{print $2}' | ${AWK} -F "." '{print $1}')
	REPO_URL="http://yum.puppetlabs.com/puppetlabs-release-el-${EL_VERSION}.noarch.rpm"

# Update the hostname in network file.
    ${SED} -i s/^HOSTNAME=.*/HOSTNAME=${NODEHOSTNAME}/g /etc/sysconfig/network && print_ok || print_error "Failed to update '/etc/sysconfig/network' file. "

# Do a time sync
	print_message "Updating system time ... "
	which ntpdate && : || (echo "Installing ntpdate ..."; ${YUM} install -y -q ntpdate)
	NTPDATE="ntpdate"
	${CP} /usr/share/zoneinfo/${TIMEZONE} /etc/localtime && : || print_error "Failed to reconfigure timezone"
	${NTPDATE} pool.ntp.org && print_ok || print_error "Failed to synchronize time. "	

# Install Puppet only if it is not already installed
	if [ "${PUPPET_INSTALLED}" = false ] ; then
# Install puppet repository
		print_message "Downloading repo file from puppetlabs ... "
		if [ ${VERBOSE} -eq 1 ]; then
	    		${WGET} ${REPO_URL} && print_ok || print_error "Failed to download the repository file from puppetlabs."
		else
	    		${WGET} -q ${REPO_URL} && print_ok || print_error "Failed to download the repository file from puppetlabs."
		fi
		print_message "Installing puppet repository ... "
		${RPM} -i puppetlabs-release-*.rpm && print_ok || print_error "Failed to install puppetlabs repository."

		if [ ${MASTER} -eq 1 ]; then
# Install puppet master
			${ECHO} "Installing puppet server ... "
	    		${YUM} install puppet-server -q -y && print_ok || print_error "Failed to install puppet server."
		else
# Install puppet agent
			${ECHO} "Installing puppet agent ... "
	    		${YUM} install puppet -y && print_ok || print_error "Failed to install puppet agent."
		fi
	else
		# Remove old certificates if already installed
		/etc/init.d/puppet stop
		${RM} -rf /var/lib/puppet/ssl/*		
	fi

	if [ ${MASTER} -eq 1 ]; then	
# Configure puppet master
	    	${ECHO} "Configuring puppet server ... "
	    	${ECHO} -e "*.${DOMAIN}" > /etc/puppet/autosign.conf && : || print_error "Failed to configure puppet master's '/etc/puppet/autosign.conf'."
		${SED} -i "/server=*/d" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet master's '/etc/puppet/puppet.conf'."
	    	${SED} -i "2i server=${MASTERHOSTNAME}" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet server's '/etc/puppet/puppet.conf'."
	    	print_message "Restarting puppet server service ... "
	    	/etc/init.d/puppetmaster restart && ${ECHO} -e "Installation completed successfully. \nOpen port 8140 via IPtables." || print_error "Failed to restart puppet server."		
	else
# Configure puppet agent	    	
	    	${ECHO} "Configuring puppet agent ... "
		${SED} -i "/server=*/d" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet agent's '/etc/puppet/puppet.conf'."
	    	${SED} -i "2i server=${MASTERHOSTNAME}" /etc/puppet/puppet.conf && print_ok || print_error "Failed to configure puppet agent's '/etc/puppet/puppet.conf'."
	    	print_message "Restarting puppet agent service ... "
	    	/etc/init.d/puppet restart && ${ECHO} -e "Installation completed successfully." || print_error "Failed to restart puppet agent."		
	fi
}

# Check all input parameters.
while getopts ":vhmNd:n:s:t: --help --verbose --master --nosync --node --domain --serverip --timezone" opt; do
	case ${opt} in
    	h|--help)
        	print_usage
        	exit 0
        	;;
    	v|--verbose)
        	VERBOSE=1
        	;;
    	d|--domain)
        	DOMAIN=${OPTARG}
        	;;
    	n|--node)
        	NODENAME=${OPTARG}
        	;;
    	m|--master)
        	MASTER=1
        	;;
    	s|--serverip)
        	MASTERIP=${OPTARG}
        	;;
    	N|--nosync)
        	TIMESYNC=false
        	;;
    	t|--timezone)
        	TIMEZONE=${OPTARG}
        	;;
    	:)
        	${ECHO} -e "puppetinstall: Option -${OPTARG} requires an argument."
        	${ECHO} -e "puppetinstall: '--help or -h' gives usage information."
        	exit 1
        	;;
     	\?)
        	${ECHO} -e "puppetinstall: Invalid option: -${OPTARG}"
        	${ECHO} -e "puppetinstall: '--help or -h' gives usage information."
        	exit 1
        	;;
	esac
done

if [ ${MASTER} -eq 1 ]; then
	NODENAME="puppet"
	[ -z ${MASTERIP} ] && MASTERIP="127.0.0.1" || :
fi

if [ -z ${DOMAIN} ] || [ -z ${MASTERIP} ] || [ -z ${NODENAME} ]; then
	${ECHO} -e "puppetinstall: Require a domain, host/node name and puppet master ip address."
	${ECHO} -e "puppetinstall: '--help or -h' gives usage information."
	exit 1
fi

# Set the hostname
MASTERHOSTNAME="${DOMAIN}"
NODEHOSTNAME="${NODENAME}.${DOMAIN}"

# Check puppet exist on the system
check_for_puppet
# Get the operating system distribution
get_distro
get_confirmation

case ${OSDIST} in
	Debian)
    	update_host
    	install_on_ubuntu
    	;;
	RedHat)
    	update_host
    	install_on_redhat
    	;;
	Fedora)
    	print_error "Fedora is not recommended. Try to use CentOS."
    	;;
	*)
    	print_error "System was not identified."
    	;;
esac

`which puppet` && print_message "Successfully installed Puppet" || print_error "Failed to install Puppet"

exit 0
